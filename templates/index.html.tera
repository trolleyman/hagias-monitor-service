{% extends "base" %}

{% block title %}Monitor Layouts{% endblock %}

{% block content %}
<!-- Toast container remains fixed -->
<div class="fixed top-0 right-5 z-50 w-[400px] pointer-events-none py-5" id="toastContainer"></div>

<!-- Center the main content with proper width -->
<div class="w-full min-h-screen flex flex-col items-center justify-start">
    <div class="w-full max-w-7xl mx-auto px-4">
        <h1 class="text-4xl font-semibold text-center mb-8 mt-8">Monitor Layouts</h1>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
            {% for layout in layouts %}
            {% if not layout.hidden %}
            <button onclick="applyConfig('{{ layout.id }}')"
                class="bg-secondary-bg p-6 rounded-xl flex flex-col gap-4 relative cursor-pointer border border-white/10 transition-all duration-300 hover:bg-accent hover:-translate-y-1 hover:shadow-lg">
                <span class="absolute top-4 left-4 text-2xl bg-black/20 p-1 rounded-sm">{{ layout.emoji | default(value="")
                    }}</span>
                <span class="absolute top-4 right-4 text-sm text-secondary-text bg-black/20 px-2 py-1 rounded-sm">{{
                    layout.id }}</span>
                <span class="text-xl font-semibold mt-5">{{ layout.name }}</span>
            </button>
            {% endif %}
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    class ToastManager {
        constructor() {
            this.container = document.getElementById('toastContainer');
            this.toasts = new Set();
            this.toastHeight = 76; // Base height (64px) + margin (12px)
            this.initialOffset = 20; // Initial padding from the top
        }

        show(message, type = 'success') {
            const toast = this.createToast(message, type);
            this.toasts.add(toast);
            this.container.appendChild(toast);

            // Calculate initial position based on existing toasts, including initial offset
            const position = this.toasts.size - 1;
            toast.style.top = `${this.initialOffset + (position * this.toastHeight)}px`;

            requestAnimationFrame(() => {
                toast.style.transform = 'translateX(0)';
                toast.style.opacity = '1';
            });

            if (type === 'success') {
                setTimeout(() => this.removeToast(toast), 3000);
            }
        }

        createToast(message, type) {
            const toast = document.createElement('div');

            toast.className = `
                fixed right-0 w-[400px] p-4 mb-3
                flex items-center gap-4
                bg-secondary-bg rounded-lg shadow-lg
                pointer-events-auto
                transition-all duration-300 ease-out
                ${type === 'success' ? 'border-l-4 border-green-500' : 'border-l-4 border-red-500'}
            `.trim();

            toast.style.transform = 'translateX(100%)';
            toast.style.opacity = '0';

            const messageEl = document.createElement('span');
            messageEl.className = 'flex-1 min-w-0 break-words';
            messageEl.textContent = message;
            toast.appendChild(messageEl);

            const closeButton = document.createElement('button');
            closeButton.className = 'shrink-0 text-secondary-text hover:text-primary-text text-xl';
            closeButton.innerHTML = '&times;';
            closeButton.onclick = () => this.removeToast(toast);
            toast.appendChild(closeButton);

            return toast;
        }

        removeToast(toast) {
            if (toast.isRemoving) return;
            toast.isRemoving = true;

            toast.style.transform = 'translateX(100%)';
            toast.style.opacity = '0';

            toast.addEventListener('transitionend', () => {
                this.toasts.delete(toast);
                toast.remove();
                this.updatePositions();
            }, { once: true });
        }

        updatePositions() {
            const toastArray = Array.from(this.toasts);

            toastArray.forEach((toast, index) => {
                // Include initial offset in position calculation
                const newTop = this.initialOffset + (index * this.toastHeight);

                if (parseInt(toast.style.top) !== newTop) {
                    toast.style.transition = 'all 0.3s ease-out';
                    toast.style.top = `${newTop}px`;
                }
            });
        }
    }

    // Initialize toast manager
    const toastManager = new ToastManager();

    window.addEventListener('resize', () => {
        requestAnimationFrame(() => toastManager.updatePositions());
    });

    // Modified applyConfig to use new toast manager
    async function applyConfig(id) {
        try {
            const response = await fetch('/api/apply/' + id, {
                method: 'POST'
            });
            if (response.ok) {
                toastManager.show('Configuration applied successfully!', 'success');
            } else {
                const errorText = await response.text();
                toastManager.show(`Failed to apply configuration: ${errorText}`, 'error');
            }
        } catch (error) {
            toastManager.show(`Error applying configuration: ${error}`, 'error');
        }
    }
</script>
{% endblock %}
