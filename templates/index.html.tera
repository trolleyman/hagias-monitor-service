{% extends "base" %}

{% block title %}Monitor Configurations{% endblock %}

{% block head %}
<style>
    :root {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --text-primary: #ffffff;
        --text-secondary: #b3b3b3;
        --accent-color: #4a90e2;
        --hover-color: #3a7bc8;
        --success-color: #4caf50;
        --error-color: #f44336;
    }

    body {
        font-family: 'Segoe UI', Arial, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }

    h1 {
        color: var(--text-primary);
        margin-bottom: 30px;
        font-size: 2.5em;
        font-weight: 600;
        text-align: center;
    }

    .config-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        padding: 0;
    }

    .config-item {
        background: var(--bg-secondary);
        padding: 25px;
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        position: relative;
        cursor: pointer;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }

    .config-item:hover {
        background: var(--accent-color);
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .config-name {
        font-size: 1.3em;
        font-weight: 600;
        color: var(--text-primary);
        margin-top: 20px;
    }

    .config-id {
        color: var(--text-secondary);
        font-size: 0.9em;
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(0, 0, 0, 0.2);
        padding: 4px 8px;
        border-radius: 4px;
    }

    .config-emoji {
        position: absolute;
        top: 15px;
        left: 15px;
        font-size: 1.5em;
        background: rgba(0, 0, 0, 0.2);
        padding: 4px 8px;
        border-radius: 4px;
    }

    @media (max-width: 768px) {
        .config-grid {
            grid-template-columns: 1fr;
        }
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .toast {
        background: var(--bg-secondary);
        color: var(--text-primary);
        padding: 16px 24px;
        border-radius: 8px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        animation: slideIn 0.3s ease-out;
        border-left: 4px solid;
    }

    .toast.success {
        border-left-color: var(--success-color);
    }

    .toast.error {
        border-left-color: var(--error-color);
    }

    .toast-close {
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        font-size: 1.2em;
        padding: 0 8px;
        margin-left: 16px;
    }

    .toast-close:hover {
        color: var(--text-primary);
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="toast-container" id="toastContainer"></div>
<h1>Monitor Configurations</h1>
<div class="config-grid">
    {% for layout in layouts %}
        {% if not layout.hidden %}
        <button class="config-item" onclick="applyConfig('{{ layout.id }}')">
            <span class="config-emoji">{{ layout.emoji | default(value="") }}</span>
            <span class="config-id">{{ layout.id }}</span>
            <span class="config-name">{{ layout.name }}</span>
        </button>
        {% endif %}
    {% endfor %}
</div>
{% endblock %}

{% block scripts %}
<script>
    function showToast(message, type = 'success') {
        const container = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;

        const messageSpan = document.createElement('span');
        messageSpan.textContent = message;

        const closeButton = document.createElement('button');
        closeButton.className = 'toast-close';
        closeButton.innerHTML = '&times;';
        closeButton.onclick = () => {
            toast.style.animation = 'slideOut 0.3s ease-out';
            setTimeout(() => toast.remove(), 300);
        };

        toast.appendChild(messageSpan);
        toast.appendChild(closeButton);
        container.appendChild(toast);

        if (type === 'success') {
            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease-out';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    }

    async function applyConfig(id) {
        try {
            const response = await fetch('/api/apply/' + id, {
                method: 'POST'
            });
            if (response.ok) {
                showToast('Configuration applied successfully!', 'success');
            } else {
                const errorText = await response.text();
                showToast(`Failed to apply configuration: ${errorText}`, 'error');
            }
        } catch (error) {
            showToast('Error applying configuration: ' + error, 'error');
        }
    }
</script>
{% endblock %}
