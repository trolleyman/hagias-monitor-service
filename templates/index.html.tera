{% extends "base" %}

{% block title %}Monitor Configurations{% endblock %}

{% block head %}
<style>
    :root {
        --bg-primary: #1a1a1a;
        --bg-secondary: #2d2d2d;
        --text-primary: #ffffff;
        --text-secondary: #b3b3b3;
        --accent-color: #4a90e2;
        --hover-color: #3a7bc8;
        --success-color: #4caf50;
        --error-color: #f44336;
    }

    body {
        font-family: 'Segoe UI', Arial, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }

    h1 {
        color: var(--text-primary);
        margin-bottom: 30px;
        font-size: 2.5em;
        font-weight: 600;
        text-align: center;
    }

    .config-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        padding: 0;
    }

    .config-item {
        background: var(--bg-secondary);
        padding: 25px;
        border-radius: 12px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        position: relative;
        cursor: pointer;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }

    .config-item:hover {
        background: var(--accent-color);
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .config-name {
        font-size: 1.3em;
        font-weight: 600;
        color: var(--text-primary);
        margin-top: 20px;
    }

    .config-id {
        color: var(--text-secondary);
        font-size: 0.9em;
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(0, 0, 0, 0.2);
        padding: 4px 8px;
        border-radius: 4px;
    }

    .config-emoji {
        position: absolute;
        top: 15px;
        left: 15px;
        font-size: 1.5em;
        background: rgba(0, 0, 0, 0.2);
        padding: 4px 8px;
        border-radius: 4px;
    }

    @media (max-width: 768px) {
        .config-grid {
            grid-template-columns: 1fr;
        }
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .toast {
        background: var(--bg-secondary);
        color: var(--text-primary);
        padding: 16px 24px;
        border-radius: 8px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        animation: slideIn 0.3s ease-out;
        border-left: 4px solid;
    }

    .toast.success {
        border-left-color: var(--success-color);
    }

    .toast.error {
        border-left-color: var(--error-color);
    }

    .toast-close {
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        font-size: 1.2em;
        padding: 0 8px;
        margin-left: 16px;
    }

    .toast-close:hover {
        color: var(--text-primary);
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="fixed top-0 right-5 z-50 w-[400px] pointer-events-none py-5" id="toastContainer"></div>
<div class="max-w-7xl mx-auto p-5">
    <h1 class="text-4xl font-semibold text-center mb-8">Monitor Configurations</h1>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
        {% for layout in layouts %}
            {% if not layout.hidden %}
            <button
                onclick="applyConfig('{{ layout.id }}')"
                class="bg-secondary-bg p-6 rounded-xl flex flex-col gap-4 relative cursor-pointer border border-white/10 transition-all duration-300 hover:bg-accent hover:-translate-y-1 hover:shadow-lg"
            >
                <span class="absolute top-4 left-4 text-2xl bg-black/20 p-1 rounded">{{ layout.emoji | default(value="") }}</span>
                <span class="absolute top-4 right-4 text-sm text-secondary-text bg-black/20 px-2 py-1 rounded">{{ layout.id }}</span>
                <span class="text-xl font-semibold mt-5">{{ layout.name }}</span>
            </button>
            {% endif %}
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    class ToastManager {
        constructor() {
            this.container = document.getElementById('toastContainer');
            this.toasts = new Set();
            this.toastHeight = 76; // Base height (64px) + margin (12px)
            this.initialOffset = 20; // Initial padding from the top
        }

        show(message, type = 'success') {
            const toast = this.createToast(message, type);
            this.toasts.add(toast);
            this.container.appendChild(toast);

            // Calculate initial position based on existing toasts, including initial offset
            const position = this.toasts.size - 1;
            toast.style.top = `${this.initialOffset + (position * this.toastHeight)}px`;

            requestAnimationFrame(() => {
                toast.style.transform = 'translateX(0)';
                toast.style.opacity = '1';
            });

            if (type === 'success') {
                setTimeout(() => this.removeToast(toast), 3000);
            }
        }

        createToast(message, type) {
            const toast = document.createElement('div');

            toast.className = `
                fixed right-0 w-[400px] p-4 mb-3
                flex items-center gap-4
                bg-secondary-bg rounded-lg shadow-lg
                pointer-events-auto
                transition-all duration-300 ease-out
                ${type === 'success' ? 'border-l-4 border-green-500' : 'border-l-4 border-red-500'}
            `.trim();

            toast.style.transform = 'translateX(100%)';
            toast.style.opacity = '0';

            const messageEl = document.createElement('span');
            messageEl.className = 'flex-1 min-w-0 break-words';
            messageEl.textContent = message;
            toast.appendChild(messageEl);

            const closeButton = document.createElement('button');
            closeButton.className = 'flex-shrink-0 text-secondary-text hover:text-primary-text text-xl';
            closeButton.innerHTML = '&times;';
            closeButton.onclick = () => this.removeToast(toast);
            toast.appendChild(closeButton);

            return toast;
        }

        removeToast(toast) {
            if (toast.isRemoving) return;
            toast.isRemoving = true;

            toast.style.transform = 'translateX(100%)';
            toast.style.opacity = '0';

            toast.addEventListener('transitionend', () => {
                this.toasts.delete(toast);
                toast.remove();
                this.updatePositions();
            }, { once: true });
        }

        updatePositions() {
            const toastArray = Array.from(this.toasts);

            toastArray.forEach((toast, index) => {
                // Include initial offset in position calculation
                const newTop = this.initialOffset + (index * this.toastHeight);

                if (parseInt(toast.style.top) !== newTop) {
                    toast.style.transition = 'all 0.3s ease-out';
                    toast.style.top = `${newTop}px`;
                }
            });
        }
    }

    // Initialize toast manager
    const toastManager = new ToastManager();

    window.addEventListener('resize', () => {
        requestAnimationFrame(() => toastManager.updatePositions());
    });

    // Modified applyConfig to use new toast manager
    async function applyConfig(id) {
        try {
            const response = await fetch('/api/apply/' + id, {
                method: 'POST'
            });
            if (response.ok) {
                toastManager.show('Configuration applied successfully!', 'success');
            } else {
                const errorText = await response.text();
                toastManager.show(`Failed to apply configuration: ${errorText}`, 'error');
            }
        } catch (error) {
            toastManager.show(`Error applying configuration: ${error}`, 'error');
        }
    }
</script>
{% endblock %}
